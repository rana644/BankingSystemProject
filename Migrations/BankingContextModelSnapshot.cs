// <auto-generated />
using System;
using BankingSystem1.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankingSystem1.Migrations
{
    [DbContext(typeof(BankingContext))]
    partial class BankingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankingSystem1.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<int>("AccountStatusId")
                        .HasColumnType("int")
                        .HasColumnName("AccountStatusID");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AccountTypeID");

                    b.Property<decimal?>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DateClosed")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateOpened")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("AccountId")
                        .HasName("PK__Accounts__349DA586136C7AFB");

                    b.HasIndex("AccountStatusId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex(new[] { "UserId", "AccountTypeId" }, "UQ_OneAccountPerType")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BankingSystem1.Models.AccountCreationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Pending");

                    b.HasKey("Id")
                        .HasName("PK__AccountC__3214EC07FB753085");

                    b.HasIndex(new[] { "Email" }, "UQ__AccountC__A9D105348F5C1B4C")
                        .IsUnique();

                    b.ToTable("AccountCreationRequests");
                });

            modelBuilder.Entity("BankingSystem1.Models.AccountStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StatusId")
                        .HasName("PK__AccountS__C8EE2043902A7D31");

                    b.ToTable("AccountStatus");
                });

            modelBuilder.Entity("BankingSystem1.Models.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AccountTypeId")
                        .HasName("PK__AccountT__8F95854FC46F35C2");

                    b.ToTable("AccountType");
                });

            modelBuilder.Entity("BankingSystem1.Models.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("BranchId")
                        .HasName("PK__Branches__A1682FA591528A3C");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("BankingSystem1.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ReceiverAccountId")
                        .HasColumnType("int")
                        .HasColumnName("ReceiverAccountID");

                    b.Property<int>("SenderAccountId")
                        .HasColumnType("int")
                        .HasColumnName("SenderAccountID");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("TransactionId")
                        .HasName("PK__Transact__55433A4BBB3232D5");

                    b.HasIndex("ReceiverAccountId");

                    b.HasIndex("SenderAccountId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BankingSystem1.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCACB2382CCB");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534EF0391EA")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ExchangeRateToEGP")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("BankingSystem1.Models.Account", b =>
                {
                    b.HasOne("BankingSystem1.Models.AccountStatus", "AccountStatus")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountStatusId")
                        .IsRequired()
                        .HasConstraintName("FK__Accounts__Accoun__693CA210");

                    b.HasOne("BankingSystem1.Models.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Accounts__Accoun__68487DD7");

                    b.HasOne("BankingSystem1.Models.Branch", "Branch")
                        .WithMany("Accounts")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK__Accounts__Branch__6A30C649");

                    b.HasOne("Currency", "Currency")
                        .WithMany("Accounts")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankingSystem1.Models.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Accounts__UserID__6754599E");

                    b.Navigation("AccountStatus");

                    b.Navigation("AccountType");

                    b.Navigation("Branch");

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankingSystem1.Models.Transaction", b =>
                {
                    b.HasOne("BankingSystem1.Models.Account", "ReceiverAccount")
                        .WithMany("TransactionReceiverAccounts")
                        .HasForeignKey("ReceiverAccountId")
                        .IsRequired()
                        .HasConstraintName("FK__Transacti__Recei__6EF57B66");

                    b.HasOne("BankingSystem1.Models.Account", "SenderAccount")
                        .WithMany("TransactionSenderAccounts")
                        .HasForeignKey("SenderAccountId")
                        .IsRequired()
                        .HasConstraintName("FK__Transacti__Sende__6E01572D");

                    b.Navigation("ReceiverAccount");

                    b.Navigation("SenderAccount");
                });

            modelBuilder.Entity("BankingSystem1.Models.Account", b =>
                {
                    b.Navigation("TransactionReceiverAccounts");

                    b.Navigation("TransactionSenderAccounts");
                });

            modelBuilder.Entity("BankingSystem1.Models.AccountStatus", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BankingSystem1.Models.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BankingSystem1.Models.Branch", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BankingSystem1.Models.User", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Currency", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
